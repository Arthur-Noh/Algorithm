# 그리디 알고리즘
# 백준 1931번
# 등급 실버 2

# 문제 해결 아이디어
# 하나의 회의실에 가장 많은 회의를 넣기
# 회의가 끝나는 시간이 빠른 순서로 배정할 경우 가장 많은 회의를 넣을 수 있다.
# 종료시간을 기준으로 회의를 정렬한다.
# 만약 종료시간이 같다면 시작시간을 기준으로 정렬한다.
# 이전의 종료시간을 변수(end)에 저장하고, 다음 시작시간과 비교한다.
# 종료시간(end)가 다음 시작시간보다 작거나 같으면 회의를 배정한다.(count +1)
# 종료시간 변수(end)에 다음 회의의 종료시간을 대입한다.

import sys

n = int(input())
q = []

for i in range(n):
    q.append(list(map(int, sys.stdin.readline().split())))
q = sorted(q, key=lambda x: (x[1], x[0])) # 회의의 종료시간을 기준으로 오름차순 정렬, 종료시간이 같다면 시작시간 기준

end, count = 0, 0 # 종료시간과 회의 갯수

for i in range(n):
    if end <= q[i][0]: # 현재 회의의 종료시간 <= 다음 회의의 시작시간 이면
        count += 1 # 회의 갯수를 추가하고
        end = q[i][1] # 다음 회의의 종료시간을 변수에 대입한다.

print(count)
